'''
Lab task 2
Here we implement a function which takes a discrete x and y array, and returns
a Polynomial object (the one we just implemented). This polynomial object can
be used to calculate y for any other value of x (not in that list) within the
range
'''
def get_poly(data_x, data_y):
    n_nodes = len(data_x)
    # np.zeors((a, b)) returns a (a x b) matrix, i.e., a rows and b columns
    X = np.zeros((n_nodes, n_nodes))

    # Populate the X matrix with appropriate values
    # YOUR CODE HERE
    m=0
    for i in range(len(X)):

        for j in range(len(data_x)):

            X[i][j]=data_x[m]**j

        m+=1

    print(X)

    # --------------------------------------------
    # np.linalg.inv is used to find the inverse
    # but pinv is more efficient

    X_inv = np.linalg.pinv(X) # pseudo inverse
    a = np.dot(X_inv, data_y)
    p = Polynomial(a)

    return p


# test cases for your answer

data_x = np.array([-3., -2., -1., 0., 1., 3.])
data_y = np.array([-80., -13., 6., 1., 5., 16.])
p = get_poly(data_x, data_y)

results = np.array([-80, -74.60997689, -69.36169492, -64.26436346, -59.32622134,
                   -54.55456417, -49.95577177, -45.53533558, -41.297886, -37.24721982,
                   -33.38632762, -29.71742112, -26.24196062, -22.96068235, -19.87362589,
                   -16.98016156, -14.2790178, -11.76830857,  -9.44556072,  -7.30774144,
                   -5.35128559, -3.57212312, -1.96570645, -0.52703788, 0.74930302,
                   1.86913203, 2.83863291, 3.66432993, 4.35306058, 4.9119481,
                   5.34837412, 5.66995126, 5.88449574, 6, 6.02460529,
                   5.96657428, 5.83426368, 5.63609684, 5.38053634, 5.07605665,
                   4.73111668, 4.35413242, 3.95344953, 3.53731597, 3.1138546,
                   2.69103576, 2.27664993, 1.87828029, 1.50327536, 1.15872159,
                   0.85141596, 0.58783863, 0.3741255, 0.21604084, 0.1189499,
                   0.0877915, 0.12705066, 0.2407312, 0.43232834, 0.70480134,
                   1.06054604, 1.50136754, 2.02845277, 2.64234311, 3.34290699,
                   4.1293125, 5, 5.95265474, 6.98417944, 8.09066693,
                   9.26737272, 10.50868766, 11.80811047, 13.15822045, 14.55065,
                   15.97605727, 17.42409876, 18.88340192, 20.34153777, 21.78499351,
                   23.19914511, 24.56822994, 25.87531935, 27.1022913, 28.22980298,
                   29.23726338, 30.10280593, 30.80326108, 31.31412894, 31.60955188,
                   31.6622871, 31.4436793, 30.92363323, 30.07058634, 28.85148136,
                   27.23173894, 25.17523021, 22.64424943, 19.59948659, 16])

x_arr = np.linspace(-3, 3, 100)
test = p(x_arr)

np.testing.assert_array_almost_equal(test, results)



data_x = np.array([-3., -2., -1., 0., 1., 3.])
data_y = np.array([-80., -13., 6., 1., 5., 16.])
p = get_poly(data_x, data_y)
'''
np.linspace(a, b, n) returns a numpy array of n points equally
spaced from a to b
'''
x_arr = np.linspace(-3, 3, 100)

# interpolated values
y_interp = p(x_arr)

# pyplot is used for plotting
# Must read: [https://www.tutorialspoint.com/numpy/numpy_matplotlib.htm]

plt.plot(x_arr, y_interp, 'b')
plt.plot(data_x, data_y, 'g*')
plt.xlabel('x - axis')
plt.ylabel('y - axis')


plt.show()
